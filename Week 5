package lab5;

/**
 * A Triangle with three integer lengths
 *
 * @author mdixon
 */
public class Triangle {
private int sideA, sideB, sideC; // Length of side A, B and C
/**
 * An Isosceles triangle is a triangle which has two equal length sides.
 *
 * @return true if the triangle is isosceles
 */
public boolean isIsosceles() {
return (sideA == sideB && sideA != sideC) ||
(sideB == sideC && sideB != sideA) ||
(sideC == sideA && sideC != sideB);
}
/**
 * An Equilateral triangle is a triangle which has three equal length sides.
 *
 * @return true if the triangle is equilateral
 */
public boolean isEquilateral() {
return (sideA == sideB && sideA == sideC);
}
/**
 * A scalene triangle is a triangle in which all three sides are in different lengths.
 *
 * @return true if the triangle is scalene
 */
public boolean isScalene() {
return (sideA != sideB && sideA != sideC && sideB != sideC);
}
/**
 * Sets each side of the triangle to a given value.
 *
 * @param a length of side A
 * @param b length of side B
 * @param c length of side C
 */
public void setSides(int a, int b, int c) {
sideA = Math.abs(a);
sideB = Math.abs(b);
sideC = Math.abs(c);
}
/**
 * Sets the triangle to be equilateral with all sides set to the given length
 *
 * @param length the length of side A, B and C
 */
public void setSides(int length) {
sideA = sideB = sideC = Math.abs(length);
}
/**
 * Sets the triangle to be isoceles with two sides set to the same value.
 *
 * @param length the length of side A, B
 * @param other the length of side C
 */
public void setSides(int length, int other) {
sideA = sideB = Math.abs(length);
sideC = Math.abs(other);
}
/**
 * Creates and returns a copy of the triangle. Changing the side lengths of the copy will
 * not effect the original triangle.
 *
 * @return a copy of the Triangle
 */
public Triangle copy() {
return new Triangle(sideA, sideB, sideC);
}
/**
 * Calculates the total length of all the sides.
 *
 * @return the total length of all the sides.
 */
public int getPerimeter() {
return sideA + sideB + sideC;
}
/**
 * Calculates the average length of the sides.
 *
 * @return the average length of the sides as an integer
 */
public int getAverageLength() {
return (sideA + sideB + sideC) / 3;
}
/////////////////////////////////////////////////////
/**
 * Constructor
 *
 * Creates a triangle with each side set to a given value.
 *
 * @param a length of side A
 * @param b length of side B
 * @param c length of side C
 */
public Triangle(int a, int b, int c) {
sideA = Math.abs(a);
sideB = Math.abs(b);
sideC = Math.abs(c);
}
/**
 * Constructor
 *
 * Creates an equilateral triangle with all sides set to the given length
 *
 * @param length the length of side A, B and C
 */
public Triangle(int length) {
sideA = sideB = sideC = Math.abs(length);
}
/**
 * Constructor
 *
 * Creates an equilateral triangle with all sides set to 1
 */
public Triangle() {
sideA = sideB = sideC = 1;
}
}


/**
 * 
 */
package lab5;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

/**
 * 
 */
class TriangleTest {

	@Test
	void isococelestest() {
		Triangle Isoceles1 = new Triangle(-10,10,5);
		assertTrue(Isoceles1.isIsosceles());
		Triangle Isoceles3 = new Triangle(5,10,5);
		assertTrue(Isoceles3.isIsosceles());
		Triangle Isoceles4 = new Triangle(10,5,5);
		assertTrue(Isoceles4.isIsosceles());
		Triangle Isoceles2 = new Triangle(5,5,5);
		assertFalse(Isoceles2.isIsosceles());
	}
	
	@Test
	void EqualateralTest() {
		Triangle Equalateral1 = new Triangle(5,5,5);
		assertTrue(Equalateral1.isEquilateral());	
		Triangle Equalateral2 = new Triangle(7,3,5);
		assertFalse(Equalateral2.isEquilateral());
		Triangle Equalateral3 = new Triangle(5,4,5);
		assertFalse(Equalateral3.isEquilateral());
		Triangle Equalateral4 = new Triangle(5,5,4);
		assertFalse(Equalateral4.isEquilateral());
		Triangle Equalateral5 = new Triangle(4,5,5);
		assertFalse(Equalateral5.isEquilateral());
	}
	
	@Test
	void isScaleneTest() {
		Triangle scalene1 = new Triangle(5,5,5);
		assertFalse(scalene1.isScalene());
		Triangle scalene4 = new Triangle(6,5,5);
		assertFalse(scalene4.isScalene());
		Triangle scalene2 = new Triangle(5,6,5);
		assertFalse(scalene2.isScalene());
		Triangle scalene3 = new Triangle(5,5,6);
		assertFalse(scalene3.isScalene());
		Triangle scalene5 = new Triangle(5,6,7);
		assertTrue(scalene5.isScalene());
	}
	@Test
	void SetsidesTest() {
	Triangle sides = new Triangle(0,0,0);
	sides.setSides(1, 1, 1);
	assertTrue(sides.isEquilateral());
	sides.setSides(1, -1, -1);
	assertTrue(sides.isEquilateral());
	}
	@Test
	void equalateralSetSides() {
		Triangle equalsides = new Triangle(1);
		equalsides.setSides(1);
		assertTrue(equalsides.isEquilateral());
		Triangle equalsides1 = new Triangle(-1);
		equalsides1.setSides(-1);
		assertTrue(equalsides1.isEquilateral());
		
	}
	
	@Test
	void IsocelesSetSides() {
		Triangle isoSides = new Triangle(1,1,1);
		isoSides.setSides(10, 2);
		assertTrue(isoSides.isIsosceles());
		isoSides.setSides(-10, 2);
		assertTrue(isoSides.isIsosceles());
		isoSides.setSides(10, -2);
		assertTrue(isoSides.isIsosceles());
		isoSides.setSides(-10, -2);
		assertTrue(isoSides.isIsosceles());

	}
	@Test
	void CopyTest() {
		Triangle copy = new Triangle(1,1,1);
		Triangle copied = copy.copy();
		assertTrue(copied.isEquilateral());
		
	}
	@Test
	void getPerimeterTest() {
		Triangle perimeter = new Triangle(2,2,2);
		assertEquals(6,perimeter.getPerimeter());
		perimeter.setSides(10, 5, 2);
		assertEquals(17,perimeter.getPerimeter());
				
	}
	@Test
	void getAverageLengthTest() {
		Triangle avgLength = new Triangle(2,2,2);
		assertEquals(2,avgLength.getAverageLength());
	}
	
	@Test 
	void GenTriangle() {
		Triangle Gen = new Triangle();
		assertEquals(1,Gen.getAverageLength());
	}
}


100% coverage , 1 missed branch
